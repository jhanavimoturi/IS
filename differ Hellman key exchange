import random

p, g = 23, 5  

def gen_key_pair(p):
    private = random.randint(1, p - 1)
    public = pow(g, private, p)
    return private, public

def gen_shared_secret(public, private, p):
    return pow(public, private, p)

alice_private, alice_public = gen_key_pair(p)
bob_private, bob_public = gen_key_pair(p)


alice_secret = gen_shared_secret(bob_public, alice_private, p)
bob_secret = gen_shared_secret(alice_public, bob_private, p)

print("Shared secret:", alice_secret)
assert alice_secret == bob_secret




or



import random

def generate_private_key(p):
    return random.randint(2, p-2)

def compute_public_key(g, private_key, p):
    return pow(g, private_key, p)

def compute_shared_secret(public_key, private_key, p):
    return pow(public_key, private_key, p)

# Public parameters (these should be agreed upon by both parties beforehand)
p = 23  # Example of a prime number
g = 5   # Example of a primitive root modulo 23

# Alice's private and public key
alice_private_key = generate_private_key(p)
alice_public_key = compute_public_key(g, alice_private_key, p)

# Bob's private and public key
bob_private_key = generate_private_key(p)
bob_public_key = compute_public_key(g, bob_private_key, p)

# Exchange public keys (this is done over an insecure channel)

# Both parties compute the shared secret
alice_shared_secret = compute_shared_secret(bob_public_key, alice_private_key, p)
bob_shared_secret = compute_shared_secret(alice_public_key, bob_private_key, p)

# The shared secrets should be the same
print(f"Alice's Shared Secret: {alice_shared_secret}")
print(f"Bob's Shared Secret: {bob_shared_secret}")
assert alice_shared_secret == bob_shared_secret, "Shared secrets do not match!"



